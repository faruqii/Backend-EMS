// Code generated by MockGen. DO NOT EDIT.
// Source: admin_service.go

// Package services is a generated GoMock package.
package services

import (
	reflect "reflect"

	entities "github.com/Magetan-Boyz/Backend/internal/domain/entities"
	gomock "github.com/golang/mock/gomock"
)

// MockAdminService is a mock of AdminService interface.
type MockAdminService struct {
	ctrl     *gomock.Controller
	recorder *MockAdminServiceMockRecorder
}

// MockAdminServiceMockRecorder is the mock recorder for MockAdminService.
type MockAdminServiceMockRecorder struct {
	mock *MockAdminService
}

// NewMockAdminService creates a new mock instance.
func NewMockAdminService(ctrl *gomock.Controller) *MockAdminService {
	mock := &MockAdminService{ctrl: ctrl}
	mock.recorder = &MockAdminServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAdminService) EXPECT() *MockAdminServiceMockRecorder {
	return m.recorder
}

// CreateAdminToken mocks base method.
func (m *MockAdminService) CreateAdminToken(admin *entities.Admin) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAdminToken", admin)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAdminToken indicates an expected call of CreateAdminToken.
func (mr *MockAdminServiceMockRecorder) CreateAdminToken(admin interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAdminToken", reflect.TypeOf((*MockAdminService)(nil).CreateAdminToken), admin)
}

// CreateSubject mocks base method.
func (m *MockAdminService) CreateSubject(subject *entities.Subject) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSubject", subject)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSubject indicates an expected call of CreateSubject.
func (mr *MockAdminServiceMockRecorder) CreateSubject(subject interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSubject", reflect.TypeOf((*MockAdminService)(nil).CreateSubject), subject)
}

// GetAdminByToken mocks base method.
func (m *MockAdminService) GetAdminByToken(token string) (*entities.Admin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAdminByToken", token)
	ret0, _ := ret[0].(*entities.Admin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAdminByToken indicates an expected call of GetAdminByToken.
func (mr *MockAdminServiceMockRecorder) GetAdminByToken(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAdminByToken", reflect.TypeOf((*MockAdminService)(nil).GetAdminByToken), token)
}

// LogIn mocks base method.
func (m *MockAdminService) LogIn(username, password string) (*entities.Admin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LogIn", username, password)
	ret0, _ := ret[0].(*entities.Admin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LogIn indicates an expected call of LogIn.
func (mr *MockAdminServiceMockRecorder) LogIn(username, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogIn", reflect.TypeOf((*MockAdminService)(nil).LogIn), username, password)
}
