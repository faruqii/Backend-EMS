// Code generated by MockGen. DO NOT EDIT.
// Source: token_repository.go
//
// Generated by this command:
//
//	mockgen -source=token_repository.go -destination=mock_token_repository.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	entities "github.com/Magetan-Boyz/Backend/internal/domain/entities"
	gomock "go.uber.org/mock/gomock"
)

// MockTokenRepository is a mock of TokenRepository interface.
type MockTokenRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTokenRepositoryMockRecorder
}

// MockTokenRepositoryMockRecorder is the mock recorder for MockTokenRepository.
type MockTokenRepositoryMockRecorder struct {
	mock *MockTokenRepository
}

// NewMockTokenRepository creates a new mock instance.
func NewMockTokenRepository(ctrl *gomock.Controller) *MockTokenRepository {
	mock := &MockTokenRepository{ctrl: ctrl}
	mock.recorder = &MockTokenRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTokenRepository) EXPECT() *MockTokenRepositoryMockRecorder {
	return m.recorder
}

// CreateOrUpdateToken mocks base method.
func (m *MockTokenRepository) CreateOrUpdateToken(token *entities.Token) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdateToken", token)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdateToken indicates an expected call of CreateOrUpdateToken.
func (mr *MockTokenRepositoryMockRecorder) CreateOrUpdateToken(token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdateToken", reflect.TypeOf((*MockTokenRepository)(nil).CreateOrUpdateToken), token)
}

// DeleteToken mocks base method.
func (m *MockTokenRepository) DeleteToken(userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteToken", userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteToken indicates an expected call of DeleteToken.
func (mr *MockTokenRepositoryMockRecorder) DeleteToken(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteToken", reflect.TypeOf((*MockTokenRepository)(nil).DeleteToken), userID)
}

// FindRoleTypeBasedOnToken mocks base method.
func (m *MockTokenRepository) FindRoleTypeBasedOnToken(token string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindRoleTypeBasedOnToken", token)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindRoleTypeBasedOnToken indicates an expected call of FindRoleTypeBasedOnToken.
func (mr *MockTokenRepositoryMockRecorder) FindRoleTypeBasedOnToken(token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindRoleTypeBasedOnToken", reflect.TypeOf((*MockTokenRepository)(nil).FindRoleTypeBasedOnToken), token)
}

// FindUserByToken mocks base method.
func (m *MockTokenRepository) FindUserByToken(token string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserByToken", token)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUserByToken indicates an expected call of FindUserByToken.
func (mr *MockTokenRepositoryMockRecorder) FindUserByToken(token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserByToken", reflect.TypeOf((*MockTokenRepository)(nil).FindUserByToken), token)
}

// GetParentIDByUserID mocks base method.
func (m *MockTokenRepository) GetParentIDByUserID(userID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetParentIDByUserID", userID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetParentIDByUserID indicates an expected call of GetParentIDByUserID.
func (mr *MockTokenRepositoryMockRecorder) GetParentIDByUserID(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetParentIDByUserID", reflect.TypeOf((*MockTokenRepository)(nil).GetParentIDByUserID), userID)
}

// GetStudentIDByUserID mocks base method.
func (m *MockTokenRepository) GetStudentIDByUserID(userID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStudentIDByUserID", userID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStudentIDByUserID indicates an expected call of GetStudentIDByUserID.
func (mr *MockTokenRepositoryMockRecorder) GetStudentIDByUserID(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStudentIDByUserID", reflect.TypeOf((*MockTokenRepository)(nil).GetStudentIDByUserID), userID)
}

// GetTeacherIDByUserID mocks base method.
func (m *MockTokenRepository) GetTeacherIDByUserID(userID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTeacherIDByUserID", userID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTeacherIDByUserID indicates an expected call of GetTeacherIDByUserID.
func (mr *MockTokenRepositoryMockRecorder) GetTeacherIDByUserID(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTeacherIDByUserID", reflect.TypeOf((*MockTokenRepository)(nil).GetTeacherIDByUserID), userID)
}

// GetTokenByUserID mocks base method.
func (m *MockTokenRepository) GetTokenByUserID(userID string) (*entities.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTokenByUserID", userID)
	ret0, _ := ret[0].(*entities.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTokenByUserID indicates an expected call of GetTokenByUserID.
func (mr *MockTokenRepositoryMockRecorder) GetTokenByUserID(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTokenByUserID", reflect.TypeOf((*MockTokenRepository)(nil).GetTokenByUserID), userID)
}

// GetUserIDByToken mocks base method.
func (m *MockTokenRepository) GetUserIDByToken(token string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserIDByToken", token)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserIDByToken indicates an expected call of GetUserIDByToken.
func (mr *MockTokenRepositoryMockRecorder) GetUserIDByToken(token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserIDByToken", reflect.TypeOf((*MockTokenRepository)(nil).GetUserIDByToken), token)
}
