// Code generated by MockGen. DO NOT EDIT.
// Source: parent_service.go
//
// Generated by this command:
//
//	mockgen -source=parent_service.go -destination=mock_parent_service.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	entities "github.com/Magetan-Boyz/Backend/internal/domain/entities"
	gomock "go.uber.org/mock/gomock"
)

// MockParentService is a mock of ParentService interface.
type MockParentService struct {
	ctrl     *gomock.Controller
	recorder *MockParentServiceMockRecorder
}

// MockParentServiceMockRecorder is the mock recorder for MockParentService.
type MockParentServiceMockRecorder struct {
	mock *MockParentService
}

// NewMockParentService creates a new mock instance.
func NewMockParentService(ctrl *gomock.Controller) *MockParentService {
	mock := &MockParentService{ctrl: ctrl}
	mock.recorder = &MockParentServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockParentService) EXPECT() *MockParentServiceMockRecorder {
	return m.recorder
}

// CreateStudentDispensation mocks base method.
func (m *MockParentService) CreateStudentDispensation(userID string, dispensation *entities.Dispensation) (*entities.Dispensation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStudentDispensation", userID, dispensation)
	ret0, _ := ret[0].(*entities.Dispensation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateStudentDispensation indicates an expected call of CreateStudentDispensation.
func (mr *MockParentServiceMockRecorder) CreateStudentDispensation(userID, dispensation any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStudentDispensation", reflect.TypeOf((*MockParentService)(nil).CreateStudentDispensation), userID, dispensation)
}

// FilterStudentGradesByAcademicYear mocks base method.
func (m *MockParentService) FilterStudentGradesByAcademicYear(studentID, academicYear string) ([]entities.Grade, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilterStudentGradesByAcademicYear", studentID, academicYear)
	ret0, _ := ret[0].([]entities.Grade)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterStudentGradesByAcademicYear indicates an expected call of FilterStudentGradesByAcademicYear.
func (mr *MockParentServiceMockRecorder) FilterStudentGradesByAcademicYear(studentID, academicYear any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterStudentGradesByAcademicYear", reflect.TypeOf((*MockParentService)(nil).FilterStudentGradesByAcademicYear), studentID, academicYear)
}

// FilterStudentGradesBySemester mocks base method.
func (m *MockParentService) FilterStudentGradesBySemester(studentID, semester string) ([]entities.Grade, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilterStudentGradesBySemester", studentID, semester)
	ret0, _ := ret[0].([]entities.Grade)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterStudentGradesBySemester indicates an expected call of FilterStudentGradesBySemester.
func (mr *MockParentServiceMockRecorder) FilterStudentGradesBySemester(studentID, semester any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterStudentGradesBySemester", reflect.TypeOf((*MockParentService)(nil).FilterStudentGradesBySemester), studentID, semester)
}

// FilterStudentGradesBySemesterAndAcademicYear mocks base method.
func (m *MockParentService) FilterStudentGradesBySemesterAndAcademicYear(studentID, semester, academicYear string) ([]entities.Grade, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilterStudentGradesBySemesterAndAcademicYear", studentID, semester, academicYear)
	ret0, _ := ret[0].([]entities.Grade)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterStudentGradesBySemesterAndAcademicYear indicates an expected call of FilterStudentGradesBySemesterAndAcademicYear.
func (mr *MockParentServiceMockRecorder) FilterStudentGradesBySemesterAndAcademicYear(studentID, semester, academicYear any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterStudentGradesBySemesterAndAcademicYear", reflect.TypeOf((*MockParentService)(nil).FilterStudentGradesBySemesterAndAcademicYear), studentID, semester, academicYear)
}

// GetAllGradeByStudentID mocks base method.
func (m *MockParentService) GetAllGradeByStudentID(studentID string) ([]entities.Grade, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllGradeByStudentID", studentID)
	ret0, _ := ret[0].([]entities.Grade)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllGradeByStudentID indicates an expected call of GetAllGradeByStudentID.
func (mr *MockParentServiceMockRecorder) GetAllGradeByStudentID(studentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllGradeByStudentID", reflect.TypeOf((*MockParentService)(nil).GetAllGradeByStudentID), studentID)
}

// GetGradeByID mocks base method.
func (m *MockParentService) GetGradeByID(gradeID string) (*entities.Grade, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGradeByID", gradeID)
	ret0, _ := ret[0].(*entities.Grade)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGradeByID indicates an expected call of GetGradeByID.
func (mr *MockParentServiceMockRecorder) GetGradeByID(gradeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGradeByID", reflect.TypeOf((*MockParentService)(nil).GetGradeByID), gradeID)
}

// GetMyProfile mocks base method.
func (m *MockParentService) GetMyProfile(userID string) (*entities.Parent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMyProfile", userID)
	ret0, _ := ret[0].(*entities.Parent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMyProfile indicates an expected call of GetMyProfile.
func (mr *MockParentServiceMockRecorder) GetMyProfile(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMyProfile", reflect.TypeOf((*MockParentService)(nil).GetMyProfile), userID)
}

// GetMyStudent mocks base method.
func (m *MockParentService) GetMyStudent(userID string) ([]entities.Student, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMyStudent", userID)
	ret0, _ := ret[0].([]entities.Student)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMyStudent indicates an expected call of GetMyStudent.
func (mr *MockParentServiceMockRecorder) GetMyStudent(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMyStudent", reflect.TypeOf((*MockParentService)(nil).GetMyStudent), userID)
}

// GetParentIDByUserID mocks base method.
func (m *MockParentService) GetParentIDByUserID(userID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetParentIDByUserID", userID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetParentIDByUserID indicates an expected call of GetParentIDByUserID.
func (mr *MockParentServiceMockRecorder) GetParentIDByUserID(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetParentIDByUserID", reflect.TypeOf((*MockParentService)(nil).GetParentIDByUserID), userID)
}

// GetQuizAssignment mocks base method.
func (m *MockParentService) GetQuizAssignment(userID string) ([]entities.StudentQuizAssignment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQuizAssignment", userID)
	ret0, _ := ret[0].([]entities.StudentQuizAssignment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQuizAssignment indicates an expected call of GetQuizAssignment.
func (mr *MockParentServiceMockRecorder) GetQuizAssignment(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQuizAssignment", reflect.TypeOf((*MockParentService)(nil).GetQuizAssignment), userID)
}

// GetScheduleByStudentID mocks base method.
func (m *MockParentService) GetScheduleByStudentID(userID string) ([]entities.Schedule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetScheduleByStudentID", userID)
	ret0, _ := ret[0].([]entities.Schedule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetScheduleByStudentID indicates an expected call of GetScheduleByStudentID.
func (mr *MockParentServiceMockRecorder) GetScheduleByStudentID(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetScheduleByStudentID", reflect.TypeOf((*MockParentService)(nil).GetScheduleByStudentID), userID)
}

// GetStudentAchievement mocks base method.
func (m *MockParentService) GetStudentAchievement(userID string) ([]entities.StudentAchivement, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStudentAchievement", userID)
	ret0, _ := ret[0].([]entities.StudentAchivement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStudentAchievement indicates an expected call of GetStudentAchievement.
func (mr *MockParentServiceMockRecorder) GetStudentAchievement(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStudentAchievement", reflect.TypeOf((*MockParentService)(nil).GetStudentAchievement), userID)
}

// GetStudentAssignment mocks base method.
func (m *MockParentService) GetStudentAssignment(userID string) ([]entities.StudentAssignment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStudentAssignment", userID)
	ret0, _ := ret[0].([]entities.StudentAssignment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStudentAssignment indicates an expected call of GetStudentAssignment.
func (mr *MockParentServiceMockRecorder) GetStudentAssignment(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStudentAssignment", reflect.TypeOf((*MockParentService)(nil).GetStudentAssignment), userID)
}

// GetStudentAttedance mocks base method.
func (m *MockParentService) GetStudentAttedance(userID string) ([]entities.Atendance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStudentAttedance", userID)
	ret0, _ := ret[0].([]entities.Atendance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStudentAttedance indicates an expected call of GetStudentAttedance.
func (mr *MockParentServiceMockRecorder) GetStudentAttedance(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStudentAttedance", reflect.TypeOf((*MockParentService)(nil).GetStudentAttedance), userID)
}

// GetStudentByID mocks base method.
func (m *MockParentService) GetStudentByID(studentID string) (*entities.Student, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStudentByID", studentID)
	ret0, _ := ret[0].(*entities.Student)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStudentByID indicates an expected call of GetStudentByID.
func (mr *MockParentServiceMockRecorder) GetStudentByID(studentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStudentByID", reflect.TypeOf((*MockParentService)(nil).GetStudentByID), studentID)
}

// GetStudentDispensationByID mocks base method.
func (m *MockParentService) GetStudentDispensationByID(dispensationID string) (*entities.Dispensation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStudentDispensationByID", dispensationID)
	ret0, _ := ret[0].(*entities.Dispensation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStudentDispensationByID indicates an expected call of GetStudentDispensationByID.
func (mr *MockParentServiceMockRecorder) GetStudentDispensationByID(dispensationID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStudentDispensationByID", reflect.TypeOf((*MockParentService)(nil).GetStudentDispensationByID), dispensationID)
}

// GetStudentDispensations mocks base method.
func (m *MockParentService) GetStudentDispensations(userID string) ([]entities.Dispensation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStudentDispensations", userID)
	ret0, _ := ret[0].([]entities.Dispensation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStudentDispensations indicates an expected call of GetStudentDispensations.
func (mr *MockParentServiceMockRecorder) GetStudentDispensations(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStudentDispensations", reflect.TypeOf((*MockParentService)(nil).GetStudentDispensations), userID)
}

// GetStudentIDByParentID mocks base method.
func (m *MockParentService) GetStudentIDByParentID(parentID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStudentIDByParentID", parentID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStudentIDByParentID indicates an expected call of GetStudentIDByParentID.
func (mr *MockParentServiceMockRecorder) GetStudentIDByParentID(parentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStudentIDByParentID", reflect.TypeOf((*MockParentService)(nil).GetStudentIDByParentID), parentID)
}

// GetStudentLiterationDetail mocks base method.
func (m *MockParentService) GetStudentLiterationDetail(literationID string) (*entities.Literation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStudentLiterationDetail", literationID)
	ret0, _ := ret[0].(*entities.Literation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStudentLiterationDetail indicates an expected call of GetStudentLiterationDetail.
func (mr *MockParentServiceMockRecorder) GetStudentLiterationDetail(literationID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStudentLiterationDetail", reflect.TypeOf((*MockParentService)(nil).GetStudentLiterationDetail), literationID)
}

// GetStudentLiterations mocks base method.
func (m *MockParentService) GetStudentLiterations(userID string) ([]entities.Literation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStudentLiterations", userID)
	ret0, _ := ret[0].([]entities.Literation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStudentLiterations indicates an expected call of GetStudentLiterations.
func (mr *MockParentServiceMockRecorder) GetStudentLiterations(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStudentLiterations", reflect.TypeOf((*MockParentService)(nil).GetStudentLiterations), userID)
}

// GetStudentViolation mocks base method.
func (m *MockParentService) GetStudentViolation(userID string) ([]entities.Violation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStudentViolation", userID)
	ret0, _ := ret[0].([]entities.Violation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStudentViolation indicates an expected call of GetStudentViolation.
func (mr *MockParentServiceMockRecorder) GetStudentViolation(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStudentViolation", reflect.TypeOf((*MockParentService)(nil).GetStudentViolation), userID)
}

// GetTask mocks base method.
func (m *MockParentService) GetTask(userID string) ([]entities.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTask", userID)
	ret0, _ := ret[0].([]entities.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTask indicates an expected call of GetTask.
func (mr *MockParentServiceMockRecorder) GetTask(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTask", reflect.TypeOf((*MockParentService)(nil).GetTask), userID)
}

// GetViolationByID mocks base method.
func (m *MockParentService) GetViolationByID(violationID string) (*entities.Violation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetViolationByID", violationID)
	ret0, _ := ret[0].(*entities.Violation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetViolationByID indicates an expected call of GetViolationByID.
func (mr *MockParentServiceMockRecorder) GetViolationByID(violationID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetViolationByID", reflect.TypeOf((*MockParentService)(nil).GetViolationByID), violationID)
}
