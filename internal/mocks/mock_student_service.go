// Code generated by MockGen. DO NOT EDIT.
// Source: student_service.go
//
// Generated by this command:
//
//	mockgen -source=student_service.go -destination=mock_student_service.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	dto "github.com/Magetan-Boyz/Backend/internal/domain/dto"
	entities "github.com/Magetan-Boyz/Backend/internal/domain/entities"
	gomock "go.uber.org/mock/gomock"
)

// MockStudentService is a mock of StudentService interface.
type MockStudentService struct {
	ctrl     *gomock.Controller
	recorder *MockStudentServiceMockRecorder
}

// MockStudentServiceMockRecorder is the mock recorder for MockStudentService.
type MockStudentServiceMockRecorder struct {
	mock *MockStudentService
}

// NewMockStudentService creates a new mock instance.
func NewMockStudentService(ctrl *gomock.Controller) *MockStudentService {
	mock := &MockStudentService{ctrl: ctrl}
	mock.recorder = &MockStudentServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStudentService) EXPECT() *MockStudentServiceMockRecorder {
	return m.recorder
}

// CountQuizQuestions mocks base method.
func (m *MockStudentService) CountQuizQuestions(quizID string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountQuizQuestions", quizID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountQuizQuestions indicates an expected call of CountQuizQuestions.
func (mr *MockStudentServiceMockRecorder) CountQuizQuestions(quizID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountQuizQuestions", reflect.TypeOf((*MockStudentService)(nil).CountQuizQuestions), quizID)
}

// CreateAchivement mocks base method.
func (m *MockStudentService) CreateAchivement(userID string, achivement *entities.StudentAchivement) (*entities.StudentAchivement, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAchivement", userID, achivement)
	ret0, _ := ret[0].(*entities.StudentAchivement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAchivement indicates an expected call of CreateAchivement.
func (mr *MockStudentServiceMockRecorder) CreateAchivement(userID, achivement any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAchivement", reflect.TypeOf((*MockStudentService)(nil).CreateAchivement), userID, achivement)
}

// CreateDispensation mocks base method.
func (m *MockStudentService) CreateDispensation(userID string, dispensation *entities.Dispensation) (*entities.Dispensation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDispensation", userID, dispensation)
	ret0, _ := ret[0].(*entities.Dispensation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDispensation indicates an expected call of CreateDispensation.
func (mr *MockStudentServiceMockRecorder) CreateDispensation(userID, dispensation any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDispensation", reflect.TypeOf((*MockStudentService)(nil).CreateDispensation), userID, dispensation)
}

// FilterStudentGradesByAcademicYear mocks base method.
func (m *MockStudentService) FilterStudentGradesByAcademicYear(studentID, academicYear string) ([]entities.Grade, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilterStudentGradesByAcademicYear", studentID, academicYear)
	ret0, _ := ret[0].([]entities.Grade)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterStudentGradesByAcademicYear indicates an expected call of FilterStudentGradesByAcademicYear.
func (mr *MockStudentServiceMockRecorder) FilterStudentGradesByAcademicYear(studentID, academicYear any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterStudentGradesByAcademicYear", reflect.TypeOf((*MockStudentService)(nil).FilterStudentGradesByAcademicYear), studentID, academicYear)
}

// FilterStudentGradesBySemester mocks base method.
func (m *MockStudentService) FilterStudentGradesBySemester(studentID, semester string) ([]entities.Grade, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilterStudentGradesBySemester", studentID, semester)
	ret0, _ := ret[0].([]entities.Grade)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterStudentGradesBySemester indicates an expected call of FilterStudentGradesBySemester.
func (mr *MockStudentServiceMockRecorder) FilterStudentGradesBySemester(studentID, semester any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterStudentGradesBySemester", reflect.TypeOf((*MockStudentService)(nil).FilterStudentGradesBySemester), studentID, semester)
}

// FilterStudentGradesBySemesterAndAcademicYear mocks base method.
func (m *MockStudentService) FilterStudentGradesBySemesterAndAcademicYear(studentID, semester, academicYear string) ([]entities.Grade, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilterStudentGradesBySemesterAndAcademicYear", studentID, semester, academicYear)
	ret0, _ := ret[0].([]entities.Grade)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterStudentGradesBySemesterAndAcademicYear indicates an expected call of FilterStudentGradesBySemesterAndAcademicYear.
func (mr *MockStudentServiceMockRecorder) FilterStudentGradesBySemesterAndAcademicYear(studentID, semester, academicYear any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterStudentGradesBySemesterAndAcademicYear", reflect.TypeOf((*MockStudentService)(nil).FilterStudentGradesBySemesterAndAcademicYear), studentID, semester, academicYear)
}

// GetAchivementByID mocks base method.
func (m *MockStudentService) GetAchivementByID(achivementID string) (*entities.StudentAchivement, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAchivementByID", achivementID)
	ret0, _ := ret[0].(*entities.StudentAchivement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAchivementByID indicates an expected call of GetAchivementByID.
func (mr *MockStudentServiceMockRecorder) GetAchivementByID(achivementID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAchivementByID", reflect.TypeOf((*MockStudentService)(nil).GetAchivementByID), achivementID)
}

// GetAllGradeByStudentID mocks base method.
func (m *MockStudentService) GetAllGradeByStudentID(studentID string) ([]entities.Grade, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllGradeByStudentID", studentID)
	ret0, _ := ret[0].([]entities.Grade)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllGradeByStudentID indicates an expected call of GetAllGradeByStudentID.
func (mr *MockStudentServiceMockRecorder) GetAllGradeByStudentID(studentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllGradeByStudentID", reflect.TypeOf((*MockStudentService)(nil).GetAllGradeByStudentID), studentID)
}

// GetAssignment mocks base method.
func (m *MockStudentService) GetAssignment(taskID string) (*entities.StudentAssignment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAssignment", taskID)
	ret0, _ := ret[0].(*entities.StudentAssignment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAssignment indicates an expected call of GetAssignment.
func (mr *MockStudentServiceMockRecorder) GetAssignment(taskID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAssignment", reflect.TypeOf((*MockStudentService)(nil).GetAssignment), taskID)
}

// GetDetailSubject mocks base method.
func (m *MockStudentService) GetDetailSubject(subjectID string) (*entities.Subject, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDetailSubject", subjectID)
	ret0, _ := ret[0].(*entities.Subject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDetailSubject indicates an expected call of GetDetailSubject.
func (mr *MockStudentServiceMockRecorder) GetDetailSubject(subjectID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDetailSubject", reflect.TypeOf((*MockStudentService)(nil).GetDetailSubject), subjectID)
}

// GetDetailSubjectMatter mocks base method.
func (m *MockStudentService) GetDetailSubjectMatter(subjectMatterID string) (*entities.SubjectMattter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDetailSubjectMatter", subjectMatterID)
	ret0, _ := ret[0].(*entities.SubjectMattter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDetailSubjectMatter indicates an expected call of GetDetailSubjectMatter.
func (mr *MockStudentServiceMockRecorder) GetDetailSubjectMatter(subjectMatterID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDetailSubjectMatter", reflect.TypeOf((*MockStudentService)(nil).GetDetailSubjectMatter), subjectMatterID)
}

// GetDispenpationByID mocks base method.
func (m *MockStudentService) GetDispenpationByID(dispensationID string) (*entities.Dispensation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDispenpationByID", dispensationID)
	ret0, _ := ret[0].(*entities.Dispensation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDispenpationByID indicates an expected call of GetDispenpationByID.
func (mr *MockStudentServiceMockRecorder) GetDispenpationByID(dispensationID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDispenpationByID", reflect.TypeOf((*MockStudentService)(nil).GetDispenpationByID), dispensationID)
}

// GetGradeByID mocks base method.
func (m *MockStudentService) GetGradeByID(gradeID string) (*entities.Grade, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGradeByID", gradeID)
	ret0, _ := ret[0].(*entities.Grade)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGradeByID indicates an expected call of GetGradeByID.
func (mr *MockStudentServiceMockRecorder) GetGradeByID(gradeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGradeByID", reflect.TypeOf((*MockStudentService)(nil).GetGradeByID), gradeID)
}

// GetLiterationByID mocks base method.
func (m *MockStudentService) GetLiterationByID(literationID string) (*entities.Literation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLiterationByID", literationID)
	ret0, _ := ret[0].(*entities.Literation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLiterationByID indicates an expected call of GetLiterationByID.
func (mr *MockStudentServiceMockRecorder) GetLiterationByID(literationID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLiterationByID", reflect.TypeOf((*MockStudentService)(nil).GetLiterationByID), literationID)
}

// GetLiterationByStudentID mocks base method.
func (m *MockStudentService) GetLiterationByStudentID(studentID string) ([]entities.Literation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLiterationByStudentID", studentID)
	ret0, _ := ret[0].([]entities.Literation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLiterationByStudentID indicates an expected call of GetLiterationByStudentID.
func (mr *MockStudentServiceMockRecorder) GetLiterationByStudentID(studentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLiterationByStudentID", reflect.TypeOf((*MockStudentService)(nil).GetLiterationByStudentID), studentID)
}

// GetMyAchievements mocks base method.
func (m *MockStudentService) GetMyAchievements(userID string) ([]entities.StudentAchivement, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMyAchievements", userID)
	ret0, _ := ret[0].([]entities.StudentAchivement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMyAchievements indicates an expected call of GetMyAchievements.
func (mr *MockStudentServiceMockRecorder) GetMyAchievements(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMyAchievements", reflect.TypeOf((*MockStudentService)(nil).GetMyAchievements), userID)
}

// GetMyDispensations mocks base method.
func (m *MockStudentService) GetMyDispensations(userID string) ([]entities.Dispensation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMyDispensations", userID)
	ret0, _ := ret[0].([]entities.Dispensation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMyDispensations indicates an expected call of GetMyDispensations.
func (mr *MockStudentServiceMockRecorder) GetMyDispensations(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMyDispensations", reflect.TypeOf((*MockStudentService)(nil).GetMyDispensations), userID)
}

// GetMyQuizAssignment mocks base method.
func (m *MockStudentService) GetMyQuizAssignment(userID, subjectID string) ([]entities.StudentQuizAssignment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMyQuizAssignment", userID, subjectID)
	ret0, _ := ret[0].([]entities.StudentQuizAssignment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMyQuizAssignment indicates an expected call of GetMyQuizAssignment.
func (mr *MockStudentServiceMockRecorder) GetMyQuizAssignment(userID, subjectID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMyQuizAssignment", reflect.TypeOf((*MockStudentService)(nil).GetMyQuizAssignment), userID, subjectID)
}

// GetMyQuizGrade mocks base method.
func (m *MockStudentService) GetMyQuizGrade(quizID, userID string) (*entities.StudentQuizAssignment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMyQuizGrade", quizID, userID)
	ret0, _ := ret[0].(*entities.StudentQuizAssignment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMyQuizGrade indicates an expected call of GetMyQuizGrade.
func (mr *MockStudentServiceMockRecorder) GetMyQuizGrade(quizID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMyQuizGrade", reflect.TypeOf((*MockStudentService)(nil).GetMyQuizGrade), quizID, userID)
}

// GetMyQuizSubmission mocks base method.
func (m *MockStudentService) GetMyQuizSubmission(quizAssignmentID string) (*entities.StudentQuizAssignment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMyQuizSubmission", quizAssignmentID)
	ret0, _ := ret[0].(*entities.StudentQuizAssignment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMyQuizSubmission indicates an expected call of GetMyQuizSubmission.
func (mr *MockStudentServiceMockRecorder) GetMyQuizSubmission(quizAssignmentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMyQuizSubmission", reflect.TypeOf((*MockStudentService)(nil).GetMyQuizSubmission), quizAssignmentID)
}

// GetMyViolation mocks base method.
func (m *MockStudentService) GetMyViolation(userID string) ([]entities.Violation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMyViolation", userID)
	ret0, _ := ret[0].([]entities.Violation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMyViolation indicates an expected call of GetMyViolation.
func (mr *MockStudentServiceMockRecorder) GetMyViolation(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMyViolation", reflect.TypeOf((*MockStudentService)(nil).GetMyViolation), userID)
}

// GetQuiz mocks base method.
func (m *MockStudentService) GetQuiz(userID string) ([]entities.Quiz, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQuiz", userID)
	ret0, _ := ret[0].([]entities.Quiz)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQuiz indicates an expected call of GetQuiz.
func (mr *MockStudentServiceMockRecorder) GetQuiz(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQuiz", reflect.TypeOf((*MockStudentService)(nil).GetQuiz), userID)
}

// GetQuizByID mocks base method.
func (m *MockStudentService) GetQuizByID(id string) (*entities.Quiz, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQuizByID", id)
	ret0, _ := ret[0].(*entities.Quiz)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQuizByID indicates an expected call of GetQuizByID.
func (mr *MockStudentServiceMockRecorder) GetQuizByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQuizByID", reflect.TypeOf((*MockStudentService)(nil).GetQuizByID), id)
}

// GetQuizQuestions mocks base method.
func (m *MockStudentService) GetQuizQuestions(quizID string, page, pageSize int) ([]entities.Question, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQuizQuestions", quizID, page, pageSize)
	ret0, _ := ret[0].([]entities.Question)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQuizQuestions indicates an expected call of GetQuizQuestions.
func (mr *MockStudentServiceMockRecorder) GetQuizQuestions(quizID, page, pageSize any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQuizQuestions", reflect.TypeOf((*MockStudentService)(nil).GetQuizQuestions), quizID, page, pageSize)
}

// GetScedule mocks base method.
func (m *MockStudentService) GetScedule(userID string) ([]entities.Schedule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetScedule", userID)
	ret0, _ := ret[0].([]entities.Schedule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetScedule indicates an expected call of GetScedule.
func (mr *MockStudentServiceMockRecorder) GetScedule(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetScedule", reflect.TypeOf((*MockStudentService)(nil).GetScedule), userID)
}

// GetStudentIDByUserID mocks base method.
func (m *MockStudentService) GetStudentIDByUserID(userID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStudentIDByUserID", userID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStudentIDByUserID indicates an expected call of GetStudentIDByUserID.
func (mr *MockStudentServiceMockRecorder) GetStudentIDByUserID(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStudentIDByUserID", reflect.TypeOf((*MockStudentService)(nil).GetStudentIDByUserID), userID)
}

// GetSubjectMatterBySubjectID mocks base method.
func (m *MockStudentService) GetSubjectMatterBySubjectID(subjectID string) ([]entities.SubjectMattter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubjectMatterBySubjectID", subjectID)
	ret0, _ := ret[0].([]entities.SubjectMattter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubjectMatterBySubjectID indicates an expected call of GetSubjectMatterBySubjectID.
func (mr *MockStudentServiceMockRecorder) GetSubjectMatterBySubjectID(subjectID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubjectMatterBySubjectID", reflect.TypeOf((*MockStudentService)(nil).GetSubjectMatterBySubjectID), subjectID)
}

// GetSubjectsByClassID mocks base method.
func (m *MockStudentService) GetSubjectsByClassID(classID string) ([]entities.ClassSubject, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubjectsByClassID", classID)
	ret0, _ := ret[0].([]entities.ClassSubject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubjectsByClassID indicates an expected call of GetSubjectsByClassID.
func (mr *MockStudentServiceMockRecorder) GetSubjectsByClassID(classID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubjectsByClassID", reflect.TypeOf((*MockStudentService)(nil).GetSubjectsByClassID), classID)
}

// GetTask mocks base method.
func (m *MockStudentService) GetTask(userID string) ([]entities.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTask", userID)
	ret0, _ := ret[0].([]entities.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTask indicates an expected call of GetTask.
func (mr *MockStudentServiceMockRecorder) GetTask(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTask", reflect.TypeOf((*MockStudentService)(nil).GetTask), userID)
}

// GetViolationByID mocks base method.
func (m *MockStudentService) GetViolationByID(violationID string) (*entities.Violation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetViolationByID", violationID)
	ret0, _ := ret[0].(*entities.Violation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetViolationByID indicates an expected call of GetViolationByID.
func (mr *MockStudentServiceMockRecorder) GetViolationByID(violationID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetViolationByID", reflect.TypeOf((*MockStudentService)(nil).GetViolationByID), violationID)
}

// InsertLiteration mocks base method.
func (m *MockStudentService) InsertLiteration(literation *entities.Literation) (*entities.Literation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertLiteration", literation)
	ret0, _ := ret[0].(*entities.Literation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertLiteration indicates an expected call of InsertLiteration.
func (mr *MockStudentServiceMockRecorder) InsertLiteration(literation any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertLiteration", reflect.TypeOf((*MockStudentService)(nil).InsertLiteration), literation)
}

// MyAttedance mocks base method.
func (m *MockStudentService) MyAttedance(userID string) ([]entities.Atendance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MyAttedance", userID)
	ret0, _ := ret[0].([]entities.Atendance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MyAttedance indicates an expected call of MyAttedance.
func (mr *MockStudentServiceMockRecorder) MyAttedance(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MyAttedance", reflect.TypeOf((*MockStudentService)(nil).MyAttedance), userID)
}

// MyClass mocks base method.
func (m *MockStudentService) MyClass(userID string) (*entities.Class, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MyClass", userID)
	ret0, _ := ret[0].(*entities.Class)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MyClass indicates an expected call of MyClass.
func (mr *MockStudentServiceMockRecorder) MyClass(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MyClass", reflect.TypeOf((*MockStudentService)(nil).MyClass), userID)
}

// MyProfile mocks base method.
func (m *MockStudentService) MyProfile(userID string) (*dto.StudentResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MyProfile", userID)
	ret0, _ := ret[0].(*dto.StudentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MyProfile indicates an expected call of MyProfile.
func (mr *MockStudentServiceMockRecorder) MyProfile(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MyProfile", reflect.TypeOf((*MockStudentService)(nil).MyProfile), userID)
}

// MySubjects mocks base method.
func (m *MockStudentService) MySubjects(userID string) ([]entities.ClassSubject, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MySubjects", userID)
	ret0, _ := ret[0].([]entities.ClassSubject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MySubjects indicates an expected call of MySubjects.
func (mr *MockStudentServiceMockRecorder) MySubjects(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MySubjects", reflect.TypeOf((*MockStudentService)(nil).MySubjects), userID)
}

// SubmitAssignment mocks base method.
func (m *MockStudentService) SubmitAssignment(assignment *entities.StudentAssignment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubmitAssignment", assignment)
	ret0, _ := ret[0].(error)
	return ret0
}

// SubmitAssignment indicates an expected call of SubmitAssignment.
func (mr *MockStudentServiceMockRecorder) SubmitAssignment(assignment any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitAssignment", reflect.TypeOf((*MockStudentService)(nil).SubmitAssignment), assignment)
}

// SubmitQuiz mocks base method.
func (m *MockStudentService) SubmitQuiz(quizAssignment *entities.StudentQuizAssignment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubmitQuiz", quizAssignment)
	ret0, _ := ret[0].(error)
	return ret0
}

// SubmitQuiz indicates an expected call of SubmitQuiz.
func (mr *MockStudentServiceMockRecorder) SubmitQuiz(quizAssignment any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitQuiz", reflect.TypeOf((*MockStudentService)(nil).SubmitQuiz), quizAssignment)
}

// UpdateTaskSubmission mocks base method.
func (m *MockStudentService) UpdateTaskSubmission(assignmentID string, assignment *entities.StudentAssignment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTaskSubmission", assignmentID, assignment)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTaskSubmission indicates an expected call of UpdateTaskSubmission.
func (mr *MockStudentServiceMockRecorder) UpdateTaskSubmission(assignmentID, assignment any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTaskSubmission", reflect.TypeOf((*MockStudentService)(nil).UpdateTaskSubmission), assignmentID, assignment)
}
