// Code generated by MockGen. DO NOT EDIT.
// Source: teacher_service.go
//
// Generated by this command:
//
//	mockgen -source=teacher_service.go -destination=mock_teacher_service.go -package=services
//

// Package services is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	time "time"

	dto "github.com/Magetan-Boyz/Backend/internal/domain/dto"
	entities "github.com/Magetan-Boyz/Backend/internal/domain/entities"
	gomock "go.uber.org/mock/gomock"
)

// MockTeacherService is a mock of TeacherService interface.
type MockTeacherService struct {
	ctrl     *gomock.Controller
	recorder *MockTeacherServiceMockRecorder
}

// MockTeacherServiceMockRecorder is the mock recorder for MockTeacherService.
type MockTeacherServiceMockRecorder struct {
	mock *MockTeacherService
}

// NewMockTeacherService creates a new mock instance.
func NewMockTeacherService(ctrl *gomock.Controller) *MockTeacherService {
	mock := &MockTeacherService{ctrl: ctrl}
	mock.recorder = &MockTeacherServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTeacherService) EXPECT() *MockTeacherServiceMockRecorder {
	return m.recorder
}

// CountStudent mocks base method.
func (m *MockTeacherService) CountStudent(classID, subjectID string) ([]dto.StudentResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountStudent", classID, subjectID)
	ret0, _ := ret[0].([]dto.StudentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountStudent indicates an expected call of CountStudent.
func (mr *MockTeacherServiceMockRecorder) CountStudent(classID, subjectID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountStudent", reflect.TypeOf((*MockTeacherService)(nil).CountStudent), classID, subjectID)
}

// CreateAttedance mocks base method.
func (m *MockTeacherService) CreateAttedance(attedance *entities.Atendance) (*entities.Atendance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAttedance", attedance)
	ret0, _ := ret[0].(*entities.Atendance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAttedance indicates an expected call of CreateAttedance.
func (mr *MockTeacherServiceMockRecorder) CreateAttedance(attedance any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAttedance", reflect.TypeOf((*MockTeacherService)(nil).CreateAttedance), attedance)
}

// CreateQuiz mocks base method.
func (m *MockTeacherService) CreateQuiz(quiz *entities.Quiz, questions []entities.Question) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateQuiz", quiz, questions)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateQuiz indicates an expected call of CreateQuiz.
func (mr *MockTeacherServiceMockRecorder) CreateQuiz(quiz, questions any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateQuiz", reflect.TypeOf((*MockTeacherService)(nil).CreateQuiz), quiz, questions)
}

// CreateSubjectMatter mocks base method.
func (m *MockTeacherService) CreateSubjectMatter(subjectMatter *entities.SubjectMattter) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSubjectMatter", subjectMatter)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSubjectMatter indicates an expected call of CreateSubjectMatter.
func (mr *MockTeacherServiceMockRecorder) CreateSubjectMatter(subjectMatter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSubjectMatter", reflect.TypeOf((*MockTeacherService)(nil).CreateSubjectMatter), subjectMatter)
}

// CreateTask mocks base method.
func (m *MockTeacherService) CreateTask(task *entities.Task) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTask", task)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTask indicates an expected call of CreateTask.
func (mr *MockTeacherServiceMockRecorder) CreateTask(task any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTask", reflect.TypeOf((*MockTeacherService)(nil).CreateTask), task)
}

// CreateViolation mocks base method.
func (m *MockTeacherService) CreateViolation(violation *entities.Violation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateViolation", violation)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateViolation indicates an expected call of CreateViolation.
func (mr *MockTeacherServiceMockRecorder) CreateViolation(violation any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateViolation", reflect.TypeOf((*MockTeacherService)(nil).CreateViolation), violation)
}

// DeleteAchivement mocks base method.
func (m *MockTeacherService) DeleteAchivement(achivementID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAchivement", achivementID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAchivement indicates an expected call of DeleteAchivement.
func (mr *MockTeacherServiceMockRecorder) DeleteAchivement(achivementID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAchivement", reflect.TypeOf((*MockTeacherService)(nil).DeleteAchivement), achivementID)
}

// DeleteViolation mocks base method.
func (m *MockTeacherService) DeleteViolation(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteViolation", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteViolation indicates an expected call of DeleteViolation.
func (mr *MockTeacherServiceMockRecorder) DeleteViolation(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteViolation", reflect.TypeOf((*MockTeacherService)(nil).DeleteViolation), id)
}

// FilterByAcademicYear mocks base method.
func (m *MockTeacherService) FilterByAcademicYear(academicYear string) ([]entities.Grade, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilterByAcademicYear", academicYear)
	ret0, _ := ret[0].([]entities.Grade)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterByAcademicYear indicates an expected call of FilterByAcademicYear.
func (mr *MockTeacherServiceMockRecorder) FilterByAcademicYear(academicYear any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterByAcademicYear", reflect.TypeOf((*MockTeacherService)(nil).FilterByAcademicYear), academicYear)
}

// FilterByClassID mocks base method.
func (m *MockTeacherService) FilterByClassID(classID string) ([]entities.Literation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilterByClassID", classID)
	ret0, _ := ret[0].([]entities.Literation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterByClassID indicates an expected call of FilterByClassID.
func (mr *MockTeacherServiceMockRecorder) FilterByClassID(classID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterByClassID", reflect.TypeOf((*MockTeacherService)(nil).FilterByClassID), classID)
}

// FilterBySemester mocks base method.
func (m *MockTeacherService) FilterBySemester(semester string) ([]entities.Grade, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilterBySemester", semester)
	ret0, _ := ret[0].([]entities.Grade)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterBySemester indicates an expected call of FilterBySemester.
func (mr *MockTeacherServiceMockRecorder) FilterBySemester(semester any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterBySemester", reflect.TypeOf((*MockTeacherService)(nil).FilterBySemester), semester)
}

// FilterBySemesterAndAcademicYear mocks base method.
func (m *MockTeacherService) FilterBySemesterAndAcademicYear(semester, academicYear string) ([]entities.Grade, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilterBySemesterAndAcademicYear", semester, academicYear)
	ret0, _ := ret[0].([]entities.Grade)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterBySemesterAndAcademicYear indicates an expected call of FilterBySemesterAndAcademicYear.
func (mr *MockTeacherServiceMockRecorder) FilterBySemesterAndAcademicYear(semester, academicYear any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterBySemesterAndAcademicYear", reflect.TypeOf((*MockTeacherService)(nil).FilterBySemesterAndAcademicYear), semester, academicYear)
}

// GetAchivementByID mocks base method.
func (m *MockTeacherService) GetAchivementByID(achivementID string) (*entities.StudentAchivement, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAchivementByID", achivementID)
	ret0, _ := ret[0].(*entities.StudentAchivement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAchivementByID indicates an expected call of GetAchivementByID.
func (mr *MockTeacherServiceMockRecorder) GetAchivementByID(achivementID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAchivementByID", reflect.TypeOf((*MockTeacherService)(nil).GetAchivementByID), achivementID)
}

// GetAllAchivement mocks base method.
func (m *MockTeacherService) GetAllAchivement() ([]entities.StudentAchivement, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllAchivement")
	ret0, _ := ret[0].([]entities.StudentAchivement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllAchivement indicates an expected call of GetAllAchivement.
func (mr *MockTeacherServiceMockRecorder) GetAllAchivement() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllAchivement", reflect.TypeOf((*MockTeacherService)(nil).GetAllAchivement))
}

// GetAllAchivementByStudentID mocks base method.
func (m *MockTeacherService) GetAllAchivementByStudentID(studentID string) ([]entities.StudentAchivement, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllAchivementByStudentID", studentID)
	ret0, _ := ret[0].([]entities.StudentAchivement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllAchivementByStudentID indicates an expected call of GetAllAchivementByStudentID.
func (mr *MockTeacherServiceMockRecorder) GetAllAchivementByStudentID(studentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllAchivementByStudentID", reflect.TypeOf((*MockTeacherService)(nil).GetAllAchivementByStudentID), studentID)
}

// GetAllDispensations mocks base method.
func (m *MockTeacherService) GetAllDispensations() ([]entities.Dispensation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllDispensations")
	ret0, _ := ret[0].([]entities.Dispensation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllDispensations indicates an expected call of GetAllDispensations.
func (mr *MockTeacherServiceMockRecorder) GetAllDispensations() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllDispensations", reflect.TypeOf((*MockTeacherService)(nil).GetAllDispensations))
}

// GetAllGrade mocks base method.
func (m *MockTeacherService) GetAllGrade() ([]entities.Grade, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllGrade")
	ret0, _ := ret[0].([]entities.Grade)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllGrade indicates an expected call of GetAllGrade.
func (mr *MockTeacherServiceMockRecorder) GetAllGrade() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllGrade", reflect.TypeOf((*MockTeacherService)(nil).GetAllGrade))
}

// GetAllGradeByStudentID mocks base method.
func (m *MockTeacherService) GetAllGradeByStudentID(studentID string) ([]entities.Grade, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllGradeByStudentID", studentID)
	ret0, _ := ret[0].([]entities.Grade)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllGradeByStudentID indicates an expected call of GetAllGradeByStudentID.
func (mr *MockTeacherServiceMockRecorder) GetAllGradeByStudentID(studentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllGradeByStudentID", reflect.TypeOf((*MockTeacherService)(nil).GetAllGradeByStudentID), studentID)
}

// GetAllGradeBySubjectID mocks base method.
func (m *MockTeacherService) GetAllGradeBySubjectID(subjectID string) ([]entities.Grade, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllGradeBySubjectID", subjectID)
	ret0, _ := ret[0].([]entities.Grade)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllGradeBySubjectID indicates an expected call of GetAllGradeBySubjectID.
func (mr *MockTeacherServiceMockRecorder) GetAllGradeBySubjectID(subjectID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllGradeBySubjectID", reflect.TypeOf((*MockTeacherService)(nil).GetAllGradeBySubjectID), subjectID)
}

// GetAllLiterations mocks base method.
func (m *MockTeacherService) GetAllLiterations() ([]entities.Literation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllLiterations")
	ret0, _ := ret[0].([]entities.Literation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllLiterations indicates an expected call of GetAllLiterations.
func (mr *MockTeacherServiceMockRecorder) GetAllLiterations() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllLiterations", reflect.TypeOf((*MockTeacherService)(nil).GetAllLiterations))
}

// GetAllQuizAssignment mocks base method.
func (m *MockTeacherService) GetAllQuizAssignment(quizID string) ([]entities.StudentQuizAssignment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllQuizAssignment", quizID)
	ret0, _ := ret[0].([]entities.StudentQuizAssignment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllQuizAssignment indicates an expected call of GetAllQuizAssignment.
func (mr *MockTeacherServiceMockRecorder) GetAllQuizAssignment(quizID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllQuizAssignment", reflect.TypeOf((*MockTeacherService)(nil).GetAllQuizAssignment), quizID)
}

// GetAllStudents mocks base method.
func (m *MockTeacherService) GetAllStudents(classID string) ([]entities.Student, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllStudents", classID)
	ret0, _ := ret[0].([]entities.Student)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllStudents indicates an expected call of GetAllStudents.
func (mr *MockTeacherServiceMockRecorder) GetAllStudents(classID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllStudents", reflect.TypeOf((*MockTeacherService)(nil).GetAllStudents), classID)
}

// GetAllTasks mocks base method.
func (m *MockTeacherService) GetAllTasks(userID string) ([]entities.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllTasks", userID)
	ret0, _ := ret[0].([]entities.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllTasks indicates an expected call of GetAllTasks.
func (mr *MockTeacherServiceMockRecorder) GetAllTasks(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllTasks", reflect.TypeOf((*MockTeacherService)(nil).GetAllTasks), userID)
}

// GetAllTeacherSchedule mocks base method.
func (m *MockTeacherService) GetAllTeacherSchedule(teacherID string) ([]entities.Schedule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllTeacherSchedule", teacherID)
	ret0, _ := ret[0].([]entities.Schedule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllTeacherSchedule indicates an expected call of GetAllTeacherSchedule.
func (mr *MockTeacherServiceMockRecorder) GetAllTeacherSchedule(teacherID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllTeacherSchedule", reflect.TypeOf((*MockTeacherService)(nil).GetAllTeacherSchedule), teacherID)
}

// GetAllViolation mocks base method.
func (m *MockTeacherService) GetAllViolation() ([]entities.Violation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllViolation")
	ret0, _ := ret[0].([]entities.Violation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllViolation indicates an expected call of GetAllViolation.
func (mr *MockTeacherServiceMockRecorder) GetAllViolation() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllViolation", reflect.TypeOf((*MockTeacherService)(nil).GetAllViolation))
}

// GetAttedanceByClassID mocks base method.
func (m *MockTeacherService) GetAttedanceByClassID(classID string) ([]entities.Atendance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAttedanceByClassID", classID)
	ret0, _ := ret[0].([]entities.Atendance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAttedanceByClassID indicates an expected call of GetAttedanceByClassID.
func (mr *MockTeacherServiceMockRecorder) GetAttedanceByClassID(classID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAttedanceByClassID", reflect.TypeOf((*MockTeacherService)(nil).GetAttedanceByClassID), classID)
}

// GetAttedanceBySubjectID mocks base method.
func (m *MockTeacherService) GetAttedanceBySubjectID(subjectID string) ([]entities.Atendance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAttedanceBySubjectID", subjectID)
	ret0, _ := ret[0].([]entities.Atendance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAttedanceBySubjectID indicates an expected call of GetAttedanceBySubjectID.
func (mr *MockTeacherServiceMockRecorder) GetAttedanceBySubjectID(subjectID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAttedanceBySubjectID", reflect.TypeOf((*MockTeacherService)(nil).GetAttedanceBySubjectID), subjectID)
}

// GetDetailSubjectMatter mocks base method.
func (m *MockTeacherService) GetDetailSubjectMatter(subjectMatterID string) (*entities.SubjectMattter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDetailSubjectMatter", subjectMatterID)
	ret0, _ := ret[0].(*entities.SubjectMattter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDetailSubjectMatter indicates an expected call of GetDetailSubjectMatter.
func (mr *MockTeacherServiceMockRecorder) GetDetailSubjectMatter(subjectMatterID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDetailSubjectMatter", reflect.TypeOf((*MockTeacherService)(nil).GetDetailSubjectMatter), subjectMatterID)
}

// GetDispensationByID mocks base method.
func (m *MockTeacherService) GetDispensationByID(id string) (*entities.Dispensation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDispensationByID", id)
	ret0, _ := ret[0].(*entities.Dispensation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDispensationByID indicates an expected call of GetDispensationByID.
func (mr *MockTeacherServiceMockRecorder) GetDispensationByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDispensationByID", reflect.TypeOf((*MockTeacherService)(nil).GetDispensationByID), id)
}

// GetDispensationsByStudentID mocks base method.
func (m *MockTeacherService) GetDispensationsByStudentID(studentID string) ([]entities.Dispensation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDispensationsByStudentID", studentID)
	ret0, _ := ret[0].([]entities.Dispensation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDispensationsByStudentID indicates an expected call of GetDispensationsByStudentID.
func (mr *MockTeacherServiceMockRecorder) GetDispensationsByStudentID(studentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDispensationsByStudentID", reflect.TypeOf((*MockTeacherService)(nil).GetDispensationsByStudentID), studentID)
}

// GetGradeByID mocks base method.
func (m *MockTeacherService) GetGradeByID(gradeID string) (*entities.Grade, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGradeByID", gradeID)
	ret0, _ := ret[0].(*entities.Grade)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGradeByID indicates an expected call of GetGradeByID.
func (mr *MockTeacherServiceMockRecorder) GetGradeByID(gradeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGradeByID", reflect.TypeOf((*MockTeacherService)(nil).GetGradeByID), gradeID)
}

// GetLiterationByID mocks base method.
func (m *MockTeacherService) GetLiterationByID(literationID string) (*entities.Literation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLiterationByID", literationID)
	ret0, _ := ret[0].(*entities.Literation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLiterationByID indicates an expected call of GetLiterationByID.
func (mr *MockTeacherServiceMockRecorder) GetLiterationByID(literationID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLiterationByID", reflect.TypeOf((*MockTeacherService)(nil).GetLiterationByID), literationID)
}

// GetLiterationByStudentID mocks base method.
func (m *MockTeacherService) GetLiterationByStudentID(studentID string) ([]entities.Literation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLiterationByStudentID", studentID)
	ret0, _ := ret[0].([]entities.Literation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLiterationByStudentID indicates an expected call of GetLiterationByStudentID.
func (mr *MockTeacherServiceMockRecorder) GetLiterationByStudentID(studentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLiterationByStudentID", reflect.TypeOf((*MockTeacherService)(nil).GetLiterationByStudentID), studentID)
}

// GetMySubjects mocks base method.
func (m *MockTeacherService) GetMySubjects(userID string) ([]dto.TeacherSubjectsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMySubjects", userID)
	ret0, _ := ret[0].([]dto.TeacherSubjectsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMySubjects indicates an expected call of GetMySubjects.
func (mr *MockTeacherServiceMockRecorder) GetMySubjects(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMySubjects", reflect.TypeOf((*MockTeacherService)(nil).GetMySubjects), userID)
}

// GetQuizByTeacherID mocks base method.
func (m *MockTeacherService) GetQuizByTeacherID(userID string) ([]entities.Quiz, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQuizByTeacherID", userID)
	ret0, _ := ret[0].([]entities.Quiz)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQuizByTeacherID indicates an expected call of GetQuizByTeacherID.
func (mr *MockTeacherServiceMockRecorder) GetQuizByTeacherID(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQuizByTeacherID", reflect.TypeOf((*MockTeacherService)(nil).GetQuizByTeacherID), userID)
}

// GetStudentTaskAssignment mocks base method.
func (m *MockTeacherService) GetStudentTaskAssignment(taskID string) ([]entities.StudentAssignment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStudentTaskAssignment", taskID)
	ret0, _ := ret[0].([]entities.StudentAssignment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStudentTaskAssignment indicates an expected call of GetStudentTaskAssignment.
func (mr *MockTeacherServiceMockRecorder) GetStudentTaskAssignment(taskID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStudentTaskAssignment", reflect.TypeOf((*MockTeacherService)(nil).GetStudentTaskAssignment), taskID)
}

// GetSubjectMatterBySubjectID mocks base method.
func (m *MockTeacherService) GetSubjectMatterBySubjectID(subjectID string) ([]entities.SubjectMattter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubjectMatterBySubjectID", subjectID)
	ret0, _ := ret[0].([]entities.SubjectMattter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubjectMatterBySubjectID indicates an expected call of GetSubjectMatterBySubjectID.
func (mr *MockTeacherServiceMockRecorder) GetSubjectMatterBySubjectID(subjectID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubjectMatterBySubjectID", reflect.TypeOf((*MockTeacherService)(nil).GetSubjectMatterBySubjectID), subjectID)
}

// GetTask mocks base method.
func (m *MockTeacherService) GetTask(id string) (*entities.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTask", id)
	ret0, _ := ret[0].(*entities.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTask indicates an expected call of GetTask.
func (mr *MockTeacherServiceMockRecorder) GetTask(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTask", reflect.TypeOf((*MockTeacherService)(nil).GetTask), id)
}

// GetTeacherIDByUserID mocks base method.
func (m *MockTeacherService) GetTeacherIDByUserID(userID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTeacherIDByUserID", userID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTeacherIDByUserID indicates an expected call of GetTeacherIDByUserID.
func (mr *MockTeacherServiceMockRecorder) GetTeacherIDByUserID(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTeacherIDByUserID", reflect.TypeOf((*MockTeacherService)(nil).GetTeacherIDByUserID), userID)
}

// GetTodaySchedule mocks base method.
func (m *MockTeacherService) GetTodaySchedule(teacherID string, dayOfWeek time.Weekday) ([]entities.Schedule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTodaySchedule", teacherID, dayOfWeek)
	ret0, _ := ret[0].([]entities.Schedule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTodaySchedule indicates an expected call of GetTodaySchedule.
func (mr *MockTeacherServiceMockRecorder) GetTodaySchedule(teacherID, dayOfWeek any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTodaySchedule", reflect.TypeOf((*MockTeacherService)(nil).GetTodaySchedule), teacherID, dayOfWeek)
}

// GetViolationByID mocks base method.
func (m *MockTeacherService) GetViolationByID(id string) (*entities.Violation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetViolationByID", id)
	ret0, _ := ret[0].(*entities.Violation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetViolationByID indicates an expected call of GetViolationByID.
func (mr *MockTeacherServiceMockRecorder) GetViolationByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetViolationByID", reflect.TypeOf((*MockTeacherService)(nil).GetViolationByID), id)
}

// GetViolationByStudentID mocks base method.
func (m *MockTeacherService) GetViolationByStudentID(studentID string) ([]entities.Violation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetViolationByStudentID", studentID)
	ret0, _ := ret[0].([]entities.Violation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetViolationByStudentID indicates an expected call of GetViolationByStudentID.
func (mr *MockTeacherServiceMockRecorder) GetViolationByStudentID(studentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetViolationByStudentID", reflect.TypeOf((*MockTeacherService)(nil).GetViolationByStudentID), studentID)
}

// GetWhereIamTeachTheClass mocks base method.
func (m *MockTeacherService) GetWhereIamTeachTheClass(userID string) ([]entities.ClassSubject, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWhereIamTeachTheClass", userID)
	ret0, _ := ret[0].([]entities.ClassSubject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWhereIamTeachTheClass indicates an expected call of GetWhereIamTeachTheClass.
func (mr *MockTeacherServiceMockRecorder) GetWhereIamTeachTheClass(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWhereIamTeachTheClass", reflect.TypeOf((*MockTeacherService)(nil).GetWhereIamTeachTheClass), userID)
}

// GradeStudentQuiz mocks base method.
func (m *MockTeacherService) GradeStudentQuiz(quizAssignmentID, status string, grade float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GradeStudentQuiz", quizAssignmentID, status, grade)
	ret0, _ := ret[0].(error)
	return ret0
}

// GradeStudentQuiz indicates an expected call of GradeStudentQuiz.
func (mr *MockTeacherServiceMockRecorder) GradeStudentQuiz(quizAssignmentID, status, grade any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GradeStudentQuiz", reflect.TypeOf((*MockTeacherService)(nil).GradeStudentQuiz), quizAssignmentID, status, grade)
}

// InsertGrade mocks base method.
func (m *MockTeacherService) InsertGrade(grade *entities.Grade) (*entities.Grade, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertGrade", grade)
	ret0, _ := ret[0].(*entities.Grade)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertGrade indicates an expected call of InsertGrade.
func (mr *MockTeacherServiceMockRecorder) InsertGrade(grade any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertGrade", reflect.TypeOf((*MockTeacherService)(nil).InsertGrade), grade)
}

// IsIamHomeroomTeacher mocks base method.
func (m *MockTeacherService) IsIamHomeroomTeacher(userID, classID string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsIamHomeroomTeacher", userID, classID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsIamHomeroomTeacher indicates an expected call of IsIamHomeroomTeacher.
func (mr *MockTeacherServiceMockRecorder) IsIamHomeroomTeacher(userID, classID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsIamHomeroomTeacher", reflect.TypeOf((*MockTeacherService)(nil).IsIamHomeroomTeacher), userID, classID)
}

// UpdateAchievement mocks base method.
func (m *MockTeacherService) UpdateAchievement(id string, achivement *entities.StudentAchivement) (*entities.StudentAchivement, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAchievement", id, achivement)
	ret0, _ := ret[0].(*entities.StudentAchivement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAchievement indicates an expected call of UpdateAchievement.
func (mr *MockTeacherServiceMockRecorder) UpdateAchievement(id, achivement any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAchievement", reflect.TypeOf((*MockTeacherService)(nil).UpdateAchievement), id, achivement)
}

// UpdateDispensationStatus mocks base method.
func (m *MockTeacherService) UpdateDispensationStatus(dispensationID, status string) (*entities.Dispensation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDispensationStatus", dispensationID, status)
	ret0, _ := ret[0].(*entities.Dispensation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDispensationStatus indicates an expected call of UpdateDispensationStatus.
func (mr *MockTeacherServiceMockRecorder) UpdateDispensationStatus(dispensationID, status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDispensationStatus", reflect.TypeOf((*MockTeacherService)(nil).UpdateDispensationStatus), dispensationID, status)
}

// UpdateLiterationFeedback mocks base method.
func (m *MockTeacherService) UpdateLiterationFeedback(literationID, feedback string) (*entities.Literation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLiterationFeedback", literationID, feedback)
	ret0, _ := ret[0].(*entities.Literation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateLiterationFeedback indicates an expected call of UpdateLiterationFeedback.
func (mr *MockTeacherServiceMockRecorder) UpdateLiterationFeedback(literationID, feedback any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLiterationFeedback", reflect.TypeOf((*MockTeacherService)(nil).UpdateLiterationFeedback), literationID, feedback)
}

// UpdateStudentTaskAssignment mocks base method.
func (m *MockTeacherService) UpdateStudentTaskAssignment(assignmentID string, grade float64, feedback string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStudentTaskAssignment", assignmentID, grade, feedback)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStudentTaskAssignment indicates an expected call of UpdateStudentTaskAssignment.
func (mr *MockTeacherServiceMockRecorder) UpdateStudentTaskAssignment(assignmentID, grade, feedback any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStudentTaskAssignment", reflect.TypeOf((*MockTeacherService)(nil).UpdateStudentTaskAssignment), assignmentID, grade, feedback)
}

// UpdateViolation mocks base method.
func (m *MockTeacherService) UpdateViolation(violation *entities.Violation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateViolation", violation)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateViolation indicates an expected call of UpdateViolation.
func (mr *MockTeacherServiceMockRecorder) UpdateViolation(violation any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateViolation", reflect.TypeOf((*MockTeacherService)(nil).UpdateViolation), violation)
}
