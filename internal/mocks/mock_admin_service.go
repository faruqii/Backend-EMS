// Code generated by MockGen. DO NOT EDIT.
// Source: admin_service.go
//
// Generated by this command:
//
//	mockgen -source=admin_service.go -destination=mock_admin_service.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	dto "github.com/Magetan-Boyz/Backend/internal/domain/dto"
	entities "github.com/Magetan-Boyz/Backend/internal/domain/entities"
	gomock "go.uber.org/mock/gomock"
)

// MockAdminService is a mock of AdminService interface.
type MockAdminService struct {
	ctrl     *gomock.Controller
	recorder *MockAdminServiceMockRecorder
}

// MockAdminServiceMockRecorder is the mock recorder for MockAdminService.
type MockAdminServiceMockRecorder struct {
	mock *MockAdminService
}

// NewMockAdminService creates a new mock instance.
func NewMockAdminService(ctrl *gomock.Controller) *MockAdminService {
	mock := &MockAdminService{ctrl: ctrl}
	mock.recorder = &MockAdminServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAdminService) EXPECT() *MockAdminServiceMockRecorder {
	return m.recorder
}

// AssignHomeroomTeacher mocks base method.
func (m *MockAdminService) AssignHomeroomTeacher(classID, teacherID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignHomeroomTeacher", classID, teacherID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AssignHomeroomTeacher indicates an expected call of AssignHomeroomTeacher.
func (mr *MockAdminServiceMockRecorder) AssignHomeroomTeacher(classID, teacherID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignHomeroomTeacher", reflect.TypeOf((*MockAdminService)(nil).AssignHomeroomTeacher), classID, teacherID)
}

// AssignParentToStudent mocks base method.
func (m *MockAdminService) AssignParentToStudent(parentID, studentID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignParentToStudent", parentID, studentID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AssignParentToStudent indicates an expected call of AssignParentToStudent.
func (mr *MockAdminServiceMockRecorder) AssignParentToStudent(parentID, studentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignParentToStudent", reflect.TypeOf((*MockAdminService)(nil).AssignParentToStudent), parentID, studentID)
}

// AssignSubjectToClass mocks base method.
func (m *MockAdminService) AssignSubjectToClass(subjectID, teacherID, classID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignSubjectToClass", subjectID, teacherID, classID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AssignSubjectToClass indicates an expected call of AssignSubjectToClass.
func (mr *MockAdminServiceMockRecorder) AssignSubjectToClass(subjectID, teacherID, classID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignSubjectToClass", reflect.TypeOf((*MockAdminService)(nil).AssignSubjectToClass), subjectID, teacherID, classID)
}

// AssignTeacherToSubject mocks base method.
func (m *MockAdminService) AssignTeacherToSubject(teacherIDs []string, subjectID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignTeacherToSubject", teacherIDs, subjectID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AssignTeacherToSubject indicates an expected call of AssignTeacherToSubject.
func (mr *MockAdminServiceMockRecorder) AssignTeacherToSubject(teacherIDs, subjectID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignTeacherToSubject", reflect.TypeOf((*MockAdminService)(nil).AssignTeacherToSubject), teacherIDs, subjectID)
}

// ClassExists mocks base method.
func (m *MockAdminService) ClassExists(classID string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClassExists", classID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ClassExists indicates an expected call of ClassExists.
func (mr *MockAdminServiceMockRecorder) ClassExists(classID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClassExists", reflect.TypeOf((*MockAdminService)(nil).ClassExists), classID)
}

// CreateAgenda mocks base method.
func (m *MockAdminService) CreateAgenda(agenda *entities.Agenda) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAgenda", agenda)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAgenda indicates an expected call of CreateAgenda.
func (mr *MockAdminServiceMockRecorder) CreateAgenda(agenda any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAgenda", reflect.TypeOf((*MockAdminService)(nil).CreateAgenda), agenda)
}

// CreateAnnouncement mocks base method.
func (m *MockAdminService) CreateAnnouncement(announcement *entities.Announcement) (*entities.Announcement, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAnnouncement", announcement)
	ret0, _ := ret[0].(*entities.Announcement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAnnouncement indicates an expected call of CreateAnnouncement.
func (mr *MockAdminServiceMockRecorder) CreateAnnouncement(announcement any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAnnouncement", reflect.TypeOf((*MockAdminService)(nil).CreateAnnouncement), announcement)
}

// CreateClass mocks base method.
func (m *MockAdminService) CreateClass(class *entities.Class) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateClass", class)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateClass indicates an expected call of CreateClass.
func (mr *MockAdminServiceMockRecorder) CreateClass(class any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateClass", reflect.TypeOf((*MockAdminService)(nil).CreateClass), class)
}

// CreateParent mocks base method.
func (m *MockAdminService) CreateParent(parent *entities.Parent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateParent", parent)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateParent indicates an expected call of CreateParent.
func (mr *MockAdminServiceMockRecorder) CreateParent(parent any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateParent", reflect.TypeOf((*MockAdminService)(nil).CreateParent), parent)
}

// CreateSchedule mocks base method.
func (m *MockAdminService) CreateSchedule(schedule *entities.Schedule) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSchedule", schedule)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSchedule indicates an expected call of CreateSchedule.
func (mr *MockAdminServiceMockRecorder) CreateSchedule(schedule any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSchedule", reflect.TypeOf((*MockAdminService)(nil).CreateSchedule), schedule)
}

// CreateStudent mocks base method.
func (m *MockAdminService) CreateStudent(student *entities.Student) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStudent", student)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateStudent indicates an expected call of CreateStudent.
func (mr *MockAdminServiceMockRecorder) CreateStudent(student any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStudent", reflect.TypeOf((*MockAdminService)(nil).CreateStudent), student)
}

// CreateSubject mocks base method.
func (m *MockAdminService) CreateSubject(subject *entities.Subject) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSubject", subject)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSubject indicates an expected call of CreateSubject.
func (mr *MockAdminServiceMockRecorder) CreateSubject(subject any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSubject", reflect.TypeOf((*MockAdminService)(nil).CreateSubject), subject)
}

// CreateTeacher mocks base method.
func (m *MockAdminService) CreateTeacher(teacher *entities.Teacher) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTeacher", teacher)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTeacher indicates an expected call of CreateTeacher.
func (mr *MockAdminServiceMockRecorder) CreateTeacher(teacher any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTeacher", reflect.TypeOf((*MockAdminService)(nil).CreateTeacher), teacher)
}

// DeleteAgenda mocks base method.
func (m *MockAdminService) DeleteAgenda(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAgenda", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAgenda indicates an expected call of DeleteAgenda.
func (mr *MockAdminServiceMockRecorder) DeleteAgenda(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAgenda", reflect.TypeOf((*MockAdminService)(nil).DeleteAgenda), id)
}

// DeleteAnnouncement mocks base method.
func (m *MockAdminService) DeleteAnnouncement(announcementID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAnnouncement", announcementID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAnnouncement indicates an expected call of DeleteAnnouncement.
func (mr *MockAdminServiceMockRecorder) DeleteAnnouncement(announcementID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAnnouncement", reflect.TypeOf((*MockAdminService)(nil).DeleteAnnouncement), announcementID)
}

// DeleteSchedule mocks base method.
func (m *MockAdminService) DeleteSchedule(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSchedule", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSchedule indicates an expected call of DeleteSchedule.
func (mr *MockAdminServiceMockRecorder) DeleteSchedule(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSchedule", reflect.TypeOf((*MockAdminService)(nil).DeleteSchedule), id)
}

// FindClassByID mocks base method.
func (m *MockAdminService) FindClassByID(id string) (*entities.Class, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindClassByID", id)
	ret0, _ := ret[0].(*entities.Class)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindClassByID indicates an expected call of FindClassByID.
func (mr *MockAdminServiceMockRecorder) FindClassByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindClassByID", reflect.TypeOf((*MockAdminService)(nil).FindClassByID), id)
}

// FindStudentByClassPrefix mocks base method.
func (m *MockAdminService) FindStudentByClassPrefix(prefix string) ([]entities.Student, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindStudentByClassPrefix", prefix)
	ret0, _ := ret[0].([]entities.Student)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindStudentByClassPrefix indicates an expected call of FindStudentByClassPrefix.
func (mr *MockAdminServiceMockRecorder) FindStudentByClassPrefix(prefix any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindStudentByClassPrefix", reflect.TypeOf((*MockAdminService)(nil).FindStudentByClassPrefix), prefix)
}

// FindSubjectByID mocks base method.
func (m *MockAdminService) FindSubjectByID(id string) (*entities.Subject, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindSubjectByID", id)
	ret0, _ := ret[0].(*entities.Subject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindSubjectByID indicates an expected call of FindSubjectByID.
func (mr *MockAdminServiceMockRecorder) FindSubjectByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindSubjectByID", reflect.TypeOf((*MockAdminService)(nil).FindSubjectByID), id)
}

// FindTeacherByID mocks base method.
func (m *MockAdminService) FindTeacherByID(id string) (*entities.Teacher, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindTeacherByID", id)
	ret0, _ := ret[0].(*entities.Teacher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindTeacherByID indicates an expected call of FindTeacherByID.
func (mr *MockAdminServiceMockRecorder) FindTeacherByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindTeacherByID", reflect.TypeOf((*MockAdminService)(nil).FindTeacherByID), id)
}

// GetAgendaByID mocks base method.
func (m *MockAdminService) GetAgendaByID(id string) (*entities.Agenda, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAgendaByID", id)
	ret0, _ := ret[0].(*entities.Agenda)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAgendaByID indicates an expected call of GetAgendaByID.
func (mr *MockAdminServiceMockRecorder) GetAgendaByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAgendaByID", reflect.TypeOf((*MockAdminService)(nil).GetAgendaByID), id)
}

// GetAll mocks base method.
func (m *MockAdminService) GetAll() ([]dto.ParentResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]dto.ParentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockAdminServiceMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockAdminService)(nil).GetAll))
}

// GetAllAgendas mocks base method.
func (m *MockAdminService) GetAllAgendas() ([]entities.Agenda, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllAgendas")
	ret0, _ := ret[0].([]entities.Agenda)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllAgendas indicates an expected call of GetAllAgendas.
func (mr *MockAdminServiceMockRecorder) GetAllAgendas() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllAgendas", reflect.TypeOf((*MockAdminService)(nil).GetAllAgendas))
}

// GetAllClass mocks base method.
func (m *MockAdminService) GetAllClass() ([]entities.Class, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllClass")
	ret0, _ := ret[0].([]entities.Class)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllClass indicates an expected call of GetAllClass.
func (mr *MockAdminServiceMockRecorder) GetAllClass() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllClass", reflect.TypeOf((*MockAdminService)(nil).GetAllClass))
}

// GetAllSchedule mocks base method.
func (m *MockAdminService) GetAllSchedule() ([]entities.Schedule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllSchedule")
	ret0, _ := ret[0].([]entities.Schedule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllSchedule indicates an expected call of GetAllSchedule.
func (mr *MockAdminServiceMockRecorder) GetAllSchedule() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllSchedule", reflect.TypeOf((*MockAdminService)(nil).GetAllSchedule))
}

// GetAllStudents mocks base method.
func (m *MockAdminService) GetAllStudents() ([]entities.Student, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllStudents")
	ret0, _ := ret[0].([]entities.Student)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllStudents indicates an expected call of GetAllStudents.
func (mr *MockAdminServiceMockRecorder) GetAllStudents() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllStudents", reflect.TypeOf((*MockAdminService)(nil).GetAllStudents))
}

// GetAllStudentsBelongToClass mocks base method.
func (m *MockAdminService) GetAllStudentsBelongToClass(studentID string) ([]entities.Student, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllStudentsBelongToClass", studentID)
	ret0, _ := ret[0].([]entities.Student)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllStudentsBelongToClass indicates an expected call of GetAllStudentsBelongToClass.
func (mr *MockAdminServiceMockRecorder) GetAllStudentsBelongToClass(studentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllStudentsBelongToClass", reflect.TypeOf((*MockAdminService)(nil).GetAllStudentsBelongToClass), studentID)
}

// GetAllSubject mocks base method.
func (m *MockAdminService) GetAllSubject() ([]entities.Subject, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllSubject")
	ret0, _ := ret[0].([]entities.Subject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllSubject indicates an expected call of GetAllSubject.
func (mr *MockAdminServiceMockRecorder) GetAllSubject() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllSubject", reflect.TypeOf((*MockAdminService)(nil).GetAllSubject))
}

// GetAllTeacher mocks base method.
func (m *MockAdminService) GetAllTeacher() ([]entities.Teacher, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllTeacher")
	ret0, _ := ret[0].([]entities.Teacher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllTeacher indicates an expected call of GetAllTeacher.
func (mr *MockAdminServiceMockRecorder) GetAllTeacher() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllTeacher", reflect.TypeOf((*MockAdminService)(nil).GetAllTeacher))
}

// GetAnnouncementByID mocks base method.
func (m *MockAdminService) GetAnnouncementByID(announcementID string) (*entities.Announcement, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAnnouncementByID", announcementID)
	ret0, _ := ret[0].(*entities.Announcement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAnnouncementByID indicates an expected call of GetAnnouncementByID.
func (mr *MockAdminServiceMockRecorder) GetAnnouncementByID(announcementID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnnouncementByID", reflect.TypeOf((*MockAdminService)(nil).GetAnnouncementByID), announcementID)
}

// GetAnnouncements mocks base method.
func (m *MockAdminService) GetAnnouncements() ([]entities.Announcement, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAnnouncements")
	ret0, _ := ret[0].([]entities.Announcement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAnnouncements indicates an expected call of GetAnnouncements.
func (mr *MockAdminServiceMockRecorder) GetAnnouncements() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnnouncements", reflect.TypeOf((*MockAdminService)(nil).GetAnnouncements))
}

// GetClassSchedule mocks base method.
func (m *MockAdminService) GetClassSchedule(classID string) ([]entities.Schedule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClassSchedule", classID)
	ret0, _ := ret[0].([]entities.Schedule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClassSchedule indicates an expected call of GetClassSchedule.
func (mr *MockAdminServiceMockRecorder) GetClassSchedule(classID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClassSchedule", reflect.TypeOf((*MockAdminService)(nil).GetClassSchedule), classID)
}

// GetClassSubjectsByPrefixAndSubject mocks base method.
func (m *MockAdminService) GetClassSubjectsByPrefixAndSubject(classPrefix, subjectID string) ([]entities.ClassSubject, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClassSubjectsByPrefixAndSubject", classPrefix, subjectID)
	ret0, _ := ret[0].([]entities.ClassSubject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClassSubjectsByPrefixAndSubject indicates an expected call of GetClassSubjectsByPrefixAndSubject.
func (mr *MockAdminServiceMockRecorder) GetClassSubjectsByPrefixAndSubject(classPrefix, subjectID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClassSubjectsByPrefixAndSubject", reflect.TypeOf((*MockAdminService)(nil).GetClassSubjectsByPrefixAndSubject), classPrefix, subjectID)
}

// GetClassesByPrefix mocks base method.
func (m *MockAdminService) GetClassesByPrefix(classPrefix string) ([]dto.ClassResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClassesByPrefix", classPrefix)
	ret0, _ := ret[0].([]dto.ClassResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClassesByPrefix indicates an expected call of GetClassesByPrefix.
func (mr *MockAdminServiceMockRecorder) GetClassesByPrefix(classPrefix any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClassesByPrefix", reflect.TypeOf((*MockAdminService)(nil).GetClassesByPrefix), classPrefix)
}

// GetPreloadSchedule mocks base method.
func (m *MockAdminService) GetPreloadSchedule() (*entities.Schedule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPreloadSchedule")
	ret0, _ := ret[0].(*entities.Schedule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPreloadSchedule indicates an expected call of GetPreloadSchedule.
func (mr *MockAdminServiceMockRecorder) GetPreloadSchedule() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPreloadSchedule", reflect.TypeOf((*MockAdminService)(nil).GetPreloadSchedule))
}

// GetScheduleByID mocks base method.
func (m *MockAdminService) GetScheduleByID(id string) (*entities.Schedule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetScheduleByID", id)
	ret0, _ := ret[0].(*entities.Schedule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetScheduleByID indicates an expected call of GetScheduleByID.
func (mr *MockAdminServiceMockRecorder) GetScheduleByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetScheduleByID", reflect.TypeOf((*MockAdminService)(nil).GetScheduleByID), id)
}

// GetSubjectsByClassPrefix mocks base method.
func (m *MockAdminService) GetSubjectsByClassPrefix(classPrefix string) ([]dto.SubjectResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubjectsByClassPrefix", classPrefix)
	ret0, _ := ret[0].([]dto.SubjectResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubjectsByClassPrefix indicates an expected call of GetSubjectsByClassPrefix.
func (mr *MockAdminServiceMockRecorder) GetSubjectsByClassPrefix(classPrefix any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubjectsByClassPrefix", reflect.TypeOf((*MockAdminService)(nil).GetSubjectsByClassPrefix), classPrefix)
}

// GetTeacherSubjects mocks base method.
func (m *MockAdminService) GetTeacherSubjects(teacherID string) ([]dto.TeacherSubjectsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTeacherSubjects", teacherID)
	ret0, _ := ret[0].([]dto.TeacherSubjectsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTeacherSubjects indicates an expected call of GetTeacherSubjects.
func (mr *MockAdminServiceMockRecorder) GetTeacherSubjects(teacherID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTeacherSubjects", reflect.TypeOf((*MockAdminService)(nil).GetTeacherSubjects), teacherID)
}

// GetTeachersByClassAndSubject mocks base method.
func (m *MockAdminService) GetTeachersByClassAndSubject(classID, subjectID string) ([]dto.TeacherSubjectResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTeachersByClassAndSubject", classID, subjectID)
	ret0, _ := ret[0].([]dto.TeacherSubjectResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTeachersByClassAndSubject indicates an expected call of GetTeachersByClassAndSubject.
func (mr *MockAdminServiceMockRecorder) GetTeachersByClassAndSubject(classID, subjectID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTeachersByClassAndSubject", reflect.TypeOf((*MockAdminService)(nil).GetTeachersByClassAndSubject), classID, subjectID)
}

// GetTeachersBySubjectID mocks base method.
func (m *MockAdminService) GetTeachersBySubjectID(subjectID string) ([]dto.TeacherSubjectResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTeachersBySubjectID", subjectID)
	ret0, _ := ret[0].([]dto.TeacherSubjectResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTeachersBySubjectID indicates an expected call of GetTeachersBySubjectID.
func (mr *MockAdminServiceMockRecorder) GetTeachersBySubjectID(subjectID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTeachersBySubjectID", reflect.TypeOf((*MockAdminService)(nil).GetTeachersBySubjectID), subjectID)
}

// InsertStudentToClass mocks base method.
func (m *MockAdminService) InsertStudentToClass(studentID, classID string) (*entities.Student, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertStudentToClass", studentID, classID)
	ret0, _ := ret[0].(*entities.Student)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertStudentToClass indicates an expected call of InsertStudentToClass.
func (mr *MockAdminServiceMockRecorder) InsertStudentToClass(studentID, classID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertStudentToClass", reflect.TypeOf((*MockAdminService)(nil).InsertStudentToClass), studentID, classID)
}

// IsScheduleExists mocks base method.
func (m *MockAdminService) IsScheduleExists(classID, subjectID string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsScheduleExists", classID, subjectID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsScheduleExists indicates an expected call of IsScheduleExists.
func (mr *MockAdminServiceMockRecorder) IsScheduleExists(classID, subjectID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsScheduleExists", reflect.TypeOf((*MockAdminService)(nil).IsScheduleExists), classID, subjectID)
}

// IsTeacherAssignedToSubject mocks base method.
func (m *MockAdminService) IsTeacherAssignedToSubject(teacherID, subjectID string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsTeacherAssignedToSubject", teacherID, subjectID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsTeacherAssignedToSubject indicates an expected call of IsTeacherAssignedToSubject.
func (mr *MockAdminServiceMockRecorder) IsTeacherAssignedToSubject(teacherID, subjectID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsTeacherAssignedToSubject", reflect.TypeOf((*MockAdminService)(nil).IsTeacherAssignedToSubject), teacherID, subjectID)
}

// RemoveHomeroomTeacher mocks base method.
func (m *MockAdminService) RemoveHomeroomTeacher(classID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveHomeroomTeacher", classID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveHomeroomTeacher indicates an expected call of RemoveHomeroomTeacher.
func (mr *MockAdminServiceMockRecorder) RemoveHomeroomTeacher(classID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveHomeroomTeacher", reflect.TypeOf((*MockAdminService)(nil).RemoveHomeroomTeacher), classID)
}

// RemoveParentFromStudent mocks base method.
func (m *MockAdminService) RemoveParentFromStudent(parentID, studentID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveParentFromStudent", parentID, studentID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveParentFromStudent indicates an expected call of RemoveParentFromStudent.
func (mr *MockAdminServiceMockRecorder) RemoveParentFromStudent(parentID, studentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveParentFromStudent", reflect.TypeOf((*MockAdminService)(nil).RemoveParentFromStudent), parentID, studentID)
}

// RemoveStudentFromClass mocks base method.
func (m *MockAdminService) RemoveStudentFromClass(studentID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveStudentFromClass", studentID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveStudentFromClass indicates an expected call of RemoveStudentFromClass.
func (mr *MockAdminServiceMockRecorder) RemoveStudentFromClass(studentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveStudentFromClass", reflect.TypeOf((*MockAdminService)(nil).RemoveStudentFromClass), studentID)
}

// RemoveStudentsFromClass mocks base method.
func (m *MockAdminService) RemoveStudentsFromClass(classID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveStudentsFromClass", classID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveStudentsFromClass indicates an expected call of RemoveStudentsFromClass.
func (mr *MockAdminServiceMockRecorder) RemoveStudentsFromClass(classID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveStudentsFromClass", reflect.TypeOf((*MockAdminService)(nil).RemoveStudentsFromClass), classID)
}

// RemoveSubjectFromClass mocks base method.
func (m *MockAdminService) RemoveSubjectFromClass(subjectID, classID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveSubjectFromClass", subjectID, classID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveSubjectFromClass indicates an expected call of RemoveSubjectFromClass.
func (mr *MockAdminServiceMockRecorder) RemoveSubjectFromClass(subjectID, classID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveSubjectFromClass", reflect.TypeOf((*MockAdminService)(nil).RemoveSubjectFromClass), subjectID, classID)
}

// RemoveTeacherFromSubject mocks base method.
func (m *MockAdminService) RemoveTeacherFromSubject(teacherID, subjectID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveTeacherFromSubject", teacherID, subjectID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveTeacherFromSubject indicates an expected call of RemoveTeacherFromSubject.
func (mr *MockAdminServiceMockRecorder) RemoveTeacherFromSubject(teacherID, subjectID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveTeacherFromSubject", reflect.TypeOf((*MockAdminService)(nil).RemoveTeacherFromSubject), teacherID, subjectID)
}

// UpdateAgenda mocks base method.
func (m *MockAdminService) UpdateAgenda(id string, updatedAgenda *entities.Agenda) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAgenda", id, updatedAgenda)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAgenda indicates an expected call of UpdateAgenda.
func (mr *MockAdminServiceMockRecorder) UpdateAgenda(id, updatedAgenda any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAgenda", reflect.TypeOf((*MockAdminService)(nil).UpdateAgenda), id, updatedAgenda)
}

// UpdateAnnouncement mocks base method.
func (m *MockAdminService) UpdateAnnouncement(announcement *entities.Announcement) (*entities.Announcement, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAnnouncement", announcement)
	ret0, _ := ret[0].(*entities.Announcement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAnnouncement indicates an expected call of UpdateAnnouncement.
func (mr *MockAdminServiceMockRecorder) UpdateAnnouncement(announcement any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAnnouncement", reflect.TypeOf((*MockAdminService)(nil).UpdateAnnouncement), announcement)
}

// UpdateSchedule mocks base method.
func (m *MockAdminService) UpdateSchedule(schedule *entities.Schedule) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSchedule", schedule)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSchedule indicates an expected call of UpdateSchedule.
func (mr *MockAdminServiceMockRecorder) UpdateSchedule(schedule any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSchedule", reflect.TypeOf((*MockAdminService)(nil).UpdateSchedule), schedule)
}

// UpdateSubject mocks base method.
func (m *MockAdminService) UpdateSubject(subjectID string, subject *entities.Subject) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSubject", subjectID, subject)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSubject indicates an expected call of UpdateSubject.
func (mr *MockAdminServiceMockRecorder) UpdateSubject(subjectID, subject any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSubject", reflect.TypeOf((*MockAdminService)(nil).UpdateSubject), subjectID, subject)
}

// UpdateTeacherHomeroomStatus mocks base method.
func (m *MockAdminService) UpdateTeacherHomeroomStatus(teacherID string, isHomeroom bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTeacherHomeroomStatus", teacherID, isHomeroom)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTeacherHomeroomStatus indicates an expected call of UpdateTeacherHomeroomStatus.
func (mr *MockAdminServiceMockRecorder) UpdateTeacherHomeroomStatus(teacherID, isHomeroom any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTeacherHomeroomStatus", reflect.TypeOf((*MockAdminService)(nil).UpdateTeacherHomeroomStatus), teacherID, isHomeroom)
}

// UpdateTeacherIsCouncelorStatus mocks base method.
func (m *MockAdminService) UpdateTeacherIsCouncelorStatus(teacherID string, isCouncelor bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTeacherIsCouncelorStatus", teacherID, isCouncelor)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTeacherIsCouncelorStatus indicates an expected call of UpdateTeacherIsCouncelorStatus.
func (mr *MockAdminServiceMockRecorder) UpdateTeacherIsCouncelorStatus(teacherID, isCouncelor any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTeacherIsCouncelorStatus", reflect.TypeOf((*MockAdminService)(nil).UpdateTeacherIsCouncelorStatus), teacherID, isCouncelor)
}
